@charset "UTF-8";
/**
 * Root.
 */
.coins-logon-widget {
  font-family: Trebuchet, "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", Arial, sans-serif;
  font-size: 14px;
  font-weight: normal;
  line-height: 1.5;
  text-align: left;
  /** Make children adhere to 'border-box' spacing */ }
  .coins-logon-widget *,
  .coins-logon-widget *:before,
  .coins-logon-widget *:after {
    -webkit-box-sizing: border-box;
            box-sizing: border-box; }

/* ==========================================================================
   Form Elements
   ========================================================================== */
/**
 * Form.
 *
 * The main `form` element.
 */
.coins-logon-widget-form {
  font-size: 100%;
  line-height: inherit;
  margin: 0;
  position: relative; }
  .coins-logon-widget-form:before, .coins-logon-widget-form:after {
    content: ' ';
    display: table; }
  .coins-logon-widget-form:after {
    clear: both; }

/**
 * Form Group.
 *
 * These serve as a wrapper for `label`s and `input`s. Each should be wrapped
 * with this class. These are also the targets for stateful classes.
 */
.coins-logon-widget-form-group {
  margin-bottom: 1em;
  position: relative; }

/**
 * Label.
 */
.coins-logon-widget-label {
  color: #264150;
  cursor: pointer;
  display: block;
  font-family: inherit;
  font-size: 100%;
  font-weight: inherit;
  line-height: inherit;
  margin: 0;
  padding: 0 0 .25em;
  text-align: inherit; }

/**
 * Input.
 *
 * @todo  Add hooks for more input types.
 */
input[type="email"].coins-logon-widget-input,
input[type="password"].coins-logon-widget-input,
input[type="text"].coins-logon-widget-input {
  background: #fff;
  border-color: #364c59;
  border-radius: 5px;
  border-style: solid;
  border-width: thin;
  -webkit-box-shadow: none;
          box-shadow: none;
  color: #264150;
  display: block;
  font-family: inherit;
  font-size: 100%;
  font-weight: inherit;
  line-height: inherit;
  margin: 0;
  padding: 0.5em 1em;
  -webkit-transition: -webkit-box-shadow 100ms;
  transition: -webkit-box-shadow 100ms;
  -o-transition: box-shadow 100ms;
  transition: box-shadow 100ms;
  transition: box-shadow 100ms, -webkit-box-shadow 100ms;
  width: 100%;
  /** Placeholder color */ }
  input[type="email"].coins-logon-widget-input:focus, input[type="email"].coins-logon-widget-input:hover,
  input[type="password"].coins-logon-widget-input:focus,
  input[type="password"].coins-logon-widget-input:hover,
  input[type="text"].coins-logon-widget-input:focus,
  input[type="text"].coins-logon-widget-input:hover {
    background: #fff;
    border-color: #364c59;
    color: #264150; }
  input[type="email"].coins-logon-widget-input:focus,
  input[type="password"].coins-logon-widget-input:focus,
  input[type="text"].coins-logon-widget-input:focus {
    -webkit-box-shadow: 0 0 0 0.25em #a7b9c0;
            box-shadow: 0 0 0 0.25em #a7b9c0;
    outline: none; }
  input[type="email"].coins-logon-widget-input::-webkit-input-placeholder,
  input[type="password"].coins-logon-widget-input::-webkit-input-placeholder,
  input[type="text"].coins-logon-widget-input::-webkit-input-placeholder {
    color: #718d99; }
  input[type="email"].coins-logon-widget-input::-moz-placeholder,
  input[type="password"].coins-logon-widget-input::-moz-placeholder,
  input[type="text"].coins-logon-widget-input::-moz-placeholder {
    color: #718d99; }
  input[type="email"].coins-logon-widget-input:-ms-input-placeholder,
  input[type="password"].coins-logon-widget-input:-ms-input-placeholder,
  input[type="text"].coins-logon-widget-input:-ms-input-placeholder {
    color: #718d99; }

/**
 * Icons.
 *
 * These are used in conjunction with form states to provide an applicable icon
 * to a form group.
 */
.coins-logon-widget-icon {
  font-size: 150%;
  line-height: 1;
  padding: .333em 0;
  position: absolute;
  right: 0;
  text-align: center;
  top: 0;
  width: 1.5em; }
  .coins-logon-widget-icon:after {
    display: inline-block; }
  .coins-logon-widget-label:not(.coins-logon-widget-visuallyhidden) ~ .coins-logon-widget-icon {
    top: 1.125em; }

/**
 * Input Message.
 *
 * Placed after the `input` inside the form group. Can be information relating
 * to the `input`, or can be a stateful message.
 */
.coins-logon-widget-input-message {
  display: block;
  font-size: 80%;
  line-height: 1.25;
  margin: .333em 0 0;
  padding-left: 1.25em; }

/* ==========================================================================
   Buttons
   ========================================================================== */
/**
 * Button groups
 *
 * Wrapper for two or more buttons.
 */
.coins-logon-widget-button-group {
  margin-bottom: -0.5em; }
  .coins-logon-widget-button-group:before, .coins-logon-widget-button-group:after {
    content: ' ';
    display: table; }
  .coins-logon-widget-button-group:after {
    clear: both; }
  .coins-logon-widget-button-group .coins-logon-widget-button {
    float: left;
    margin-right: 0.5em;
    margin-bottom: 0.5em; }

/**
 * Base button.
 *
 * Basic button styling, required by every button. A modifier class ('primary'
 * or 'secondary') is required for proper coloring.
 */
.coins-logon-widget-button {
  border: thin solid transparent;
  border-radius: 5px;
  cursor: pointer;
  display: inline-block;
  font-family: inherit;
  font-size: 100%;
  font-weight: inherit;
  line-height: inherit;
  padding: 0.5em 1em;
  text-decoration: none;
  -webkit-transition-duration: 100ms;
       -o-transition-duration: 100ms;
          transition-duration: 100ms;
  -webkit-transition-property: background, color, -webkit-box-shadow;
  transition-property: background, color, -webkit-box-shadow;
  -o-transition-property: background, box-shadow, color;
  transition-property: background, box-shadow, color;
  transition-property: background, box-shadow, color, -webkit-box-shadow; }
  .coins-logon-widget-button:focus {
    -webkit-box-shadow: 0 0 0 0.2em #a7b9c0;
            box-shadow: 0 0 0 0.2em #a7b9c0;
    outline: none; }

/**
 * Button color modifiers.
 */
.coins-logon-widget-button-primary {
  background: #364c59;
  color: #fff; }
  .coins-logon-widget-button-primary:focus, .coins-logon-widget-button-primary:hover, .coins-logon-widget-button-primary:active {
    background: #233139;
    color: #fff; }

.coins-logon-widget-button-secondary {
  background: #718d99;
  color: #fff; }
  .coins-logon-widget-button-secondary:focus, .coins-logon-widget-button-secondary:hover, .coins-logon-widget-button-secondary:active {
    background: #5a737d;
    color: #fff; }

/* ==========================================================================
   Notifications
   ========================================================================== */
.coins-logon-widget-notification {
  border-radius: 5px;
  color: #fff;
  margin-bottom: 1em;
  padding: 0.5em 1em; }
  .coins-logon-widget-notification a {
    font-weight: normal;
    letter-spacing: 0;
    text-decoration: underline; }
    .coins-logon-widget-notification a, .coins-logon-widget-notification a:link, .coins-logon-widget-notification a:visited, .coins-logon-widget-notification a:focus, .coins-logon-widget-notification a:hover, .coins-logon-widget-notification a:active {
      color: #fff; }
    .coins-logon-widget-notification a:focus, .coins-logon-widget-notification a:hover, .coins-logon-widget-notification a:active {
      opacity: .92; }

.coins-logon-widget-notification-error {
  background: #ef5a21; }

.coins-logon-widget-notification-success {
  background: #94b12a; }

/* ==========================================================================
   Status
   ========================================================================== */
.coins-logon-widget-status {
  color: #264150;
  float: left;
  line-height: inherit;
  margin: 0;
  padding: 0.5em 1em 0 0; }

/* ==========================================================================
   Indicator
   ========================================================================== */
/**
 * Animating loader indicator using SVG.
 *
 * @{@link  http://codepen.io/jczimm/pen/vEBpoL}
 */
.coins-logon-widget-indicator {
  bottom: 0;
  display: inline-block;
  height: 40px;
  left: 0;
  opacity: 0;
  position: absolute;
  width: 40px; }
  .coins-logon-widget-indicator svg {
    -webkit-animation: rotate 2500ms linear infinite;
            animation: rotate 2500ms linear infinite;
    height: 40px;
    width: 40px; }
  .coins-logon-widget-indicator circle {
    -webkit-animation: dash 2000ms ease-in-out infinite;
            animation: dash 2000ms ease-in-out infinite;
    stroke: #264150;
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
    stroke-linecap: round; }

@-webkit-keyframes rotate {
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@keyframes rotate {
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@-webkit-keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124; } }

@keyframes dash {
  0% {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0; }
  50% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -35; }
  100% {
    stroke-dasharray: 89, 200;
    stroke-dashoffset: -124; } }

/* ==========================================================================
   Form States
   ========================================================================== */
.coins-logon-widget-form-group-error .coins-logon-widget-input, .coins-logon-widget-form-group-success .coins-logon-widget-input {
  padding-right: 2em; }

.coins-logon-widget-form-group-error .coins-logon-widget-input {
  border-color: #ef5a21; }

.coins-logon-widget-form-group-error .coins-logon-widget-icon {
  color: #ef5a21; }
  .coins-logon-widget-form-group-error .coins-logon-widget-icon:after {
    content: "✘"; }

.coins-logon-widget-form-group-error .coins-logon-widget-input-message {
  color: #ef5a21; }

.coins-logon-widget-form-group-success .coins-logon-widget-input {
  border-color: #94b12a; }

.coins-logon-widget-form-group-success .coins-logon-widget-icon {
  color: #94b12a; }
  .coins-logon-widget-form-group-success .coins-logon-widget-icon:after {
    content: "✔"; }

.coins-logon-widget-form-group-success .coins-logon-widget-input-message {
  color: #94b12a; }

/**
 * Loading.
 *
 * Show the loading indicator.
 */
.coins-logon-widget-form-loading .coins-logon-widget-indicator {
  opacity: 1; }

/* ==========================================================================
   Helper Classes
   ========================================================================== */
/**
 * Horizontal form.
 *
 * Apply to the root `form.coins-logon-widget-form` to make the form groups and
 * button display horizontally.
 */
.coins-logon-widget-form-horizontal {
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin-right: -0.5em;
  margin-left: -0.5em; }
  .coins-logon-widget-form-horizontal .coins-logon-widget-form-group {
    -webkit-box-flex: 2;
        -ms-flex-positive: 2;
            flex-grow: 2;
    margin-bottom: 0;
    padding-right: 0.5em;
    padding-left: 0.5em; }
  .coins-logon-widget-form-horizontal .coins-logon-widget-button {
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
    margin-left: 0.5em; }

/**
 * Status form.
 *
 * Apply to the root `form.coins-logon-widget form` to add proper button styling
 * for a form that displays logon status.
 */
.coins-logon-widget-form-status .coins-logon-widget-button {
  float: left; }

/**
 * Visually hidden.
 *
 * Hide content but make it accessible for screen readers.
 * http://a11yproject.com/posts/how-to-hide-content/
 */
.coins-logon-widget-visuallyhidden {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0 !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden; }

/**
 * Align left.
 */
.coins-logon-widget-left {
  float: left; }

/**
 * Align right.
 */
.coins-logon-widget-right {
  float: right; }
/*# sourceMappingURL=data:application/json;base64, */